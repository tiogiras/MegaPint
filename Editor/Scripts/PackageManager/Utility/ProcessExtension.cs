#if UNITY_EDITOR
using System.Diagnostics;
using System.Text;

namespace Editor.Scripts.PackageManager.Utility
{

/// <summary> Extension to the <see cref="Process" /> to run processes like git in unity </summary>
internal static class ProcessExtensions
{
    #region Public Methods

    /// <summary> Run the specified process </summary>
    /// <param name="process"> Process to be run </param>
    /// <param name="application"> Process application </param>
    /// <param name="arguments"> Arguments added after the process name </param>
    /// <param name="output"> Any output generated by the process </param>
    /// <param name="errors"> Any error generated by the process </param>
    /// <returns> ExitCode of the process </returns>
    public static int Run(
        this Process process,
        string application,
        string arguments,
        out string output,
        out string errors)
    {
        process.StartInfo = new ProcessStartInfo
        {
            CreateNoWindow = true,
            UseShellExecute = false,
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            FileName = application,
            Arguments = arguments
        };

        var outputBuilder = new StringBuilder();
        var errorsBuilder = new StringBuilder();
        process.OutputDataReceived += (_, args) => outputBuilder.AppendLine(args.Data);
        process.ErrorDataReceived += (_, args) => errorsBuilder.AppendLine(args.Data);

        process.Start();
        process.BeginOutputReadLine();
        process.BeginErrorReadLine();
        process.WaitForExit();

        output = outputBuilder.ToString().TrimEnd();
        errors = errorsBuilder.ToString().TrimEnd();

        return process.ExitCode;
    }

    #endregion
}

}
#endif
